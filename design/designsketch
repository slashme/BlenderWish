BlenderWish

Server:
  Project contains:
    Name
    .blend file 
    range (list?) of frames to render
    List of frames in progress, with clients identified
    List of blacklisted clients
    Rendered frames
  Server provides:
    .blend file
    Next frame to render
    Rendered frames
  Client-server interaction:
    Client reads the latest number
    Client accepts job
        If existing client:
          If client is marked as busy with a frame:
            If repeat offender: #define threshold offense count
              blacklist
            Else:
              Increment client's offense count
              Re-send frame number that client is working on 
              Client confirms job acceptance
              Server marks frame as in progress
          Else: #client is not busy with a frame
            If frame is still available:
              Server confirms acceptance and marks frame as in progress
              If this was the published latest frame:
                Server updates frame number - GetNewFrame
            Else: #Frame is not available
              Server provides a new frame number
                Client confirms job acceptance
                Server marks frame as in progress
                If this was the published latest frame:
                  Server updates and publishes new "latest frame"
        Else: #Not existing client
          Server registers client (just by IP number at first?)
          Server confirms acceptance and marks frame as in progress
    Client completes job
    Client uploads rendered frame (how?)
    (option to do sense check with low-quality render? This would prevent disruption and subversion of project for image hosting)
    Server marks frame as complete
    Server adds frame to list of downloadable frames
    Server records render time for client profiling purposes

  GetNewFrame:
    If a frame is available for rendering:
      Server publishes it as latest frame number
    Else if all are in progress:
      Server determines threshold processing time (one standard distribution above the mean?)
      Server selects in progress job with longest processing time
      Server publishes this job as latest frame number
      If processing time above threshold:
        Server marks client as "slow" (maybe blacklist? Maybe this client had difficult frames to render?)
    Else if all are done:
      Mark project as done
      stop serving .blend file

Database structure:
  status table describes the status that a project is in:
    1|stopped
    2|running
    3|complete
  engine table lists possible render engines
    1|Internal
    2|cycles
  frame type table lists possible frame types.  So far just a few for testing.
    1|png |Portable Network Graphics
    2|jpg|JPEG
    3|exr|OpenEXR
  wishes table has
    project name
    Blender major version (int)
    Blender minor version (int)
    Blender version suffix (character field)
    status of project as a foreign key to status table
    Frame filetype as foreign key to frame filetype table
    Render engine as a foreign key to render engine table
    Unimplemented:
      Blender version max/min? 
      URL or file location?
  Unimplemented:
    Clients table will have list of clients (by IP initially, I guess? Maybe IPv6 in the same table or a different one?)
      ID as primary key
      IP address (text field?)
      client status as foreign key?
      slow flag (boolean)?
      blacklist flag (boolean)?
    Frame filetype table:
      Should contain all possible blender frame filetypes.
    Frame status table:
      0|empty
      1|draft (a low-quality frame uploaded for reference to reject invalid uploads)
      2|running
      3|complete
    Frames table will have list of frames in all projects!
      Frame ID as primary key
      wish ID as foreign key 
      client ID as foreign key: must be NULL if not taken yet, must match some client ID if running or complete
      frame status ID as foreign key
      filetype ID as foreign key. Can't be NULL
      render duration as some kind of time field: must be NULL if not complete
      upload duration as some kind of time field: must be NULL if not complete
      filesize (is this useful? maybe easier to get from filesystem.)
      URL or file location?
    Do we need an interface database with stuff like the next frame? Probably not: do it on the fly with queries.
